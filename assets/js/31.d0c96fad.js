(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{318:function(t,a,s){"use strict";s.r(a);var n=s(14),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"webpack"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack"}},[t._v("#")]),t._v(" webpack")]),t._v(" "),a("h1",{attrs:{id:"运行流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运行流程"}},[t._v("#")]),t._v(" 运行流程")]),t._v(" "),a("ol",[a("li",[t._v("校验配置文件：读取命令行传入或者 "),a("code",[t._v("webpack.config.js")]),t._v(" 文件，初始化本次构建的配置参数")]),t._v(" "),a("li",[t._v("生成 "),a("code",[t._v("Compiler")]),t._v(" 对象：实例配置文件中的插件")]),t._v(" "),a("li",[t._v("确定入口：进入 "),a("code",[t._v("entryOption")]),t._v(" 阶段，读取配置的 "),a("code",[t._v("Entries")]),t._v(" ，遍历所有的入口文件")]),t._v(" "),a("li",[t._v("编译模块：递归依赖使用 "),a("code",[t._v("loader")]),t._v(" 对文件进行编译,再将编译好的文件生成AST，所有模块和依赖分析完成之后，执行 "),a("code",[t._v("compilation")]),t._v(" 的 "),a("code",[t._v("seal")]),t._v(" 对每个chunk进行整理、优化、封装 "),a("code",[t._v("__webpack_require__")])]),t._v(" "),a("li",[t._v("输出资源 "),a("code",[t._v("emit")]),t._v("：编译及转化都已经完成，包含了最终输出的资源。已经可以在 "),a("code",[t._v("compilation.assets")]),t._v(" 上拿到所需数据，包括即将输出的资源、代码块chunk等信息")]),t._v(" "),a("li",[t._v("输出完成")])]),t._v(" "),a("h1",{attrs:{id:"webpack-插件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack-插件"}},[t._v("#")]),t._v(" webpack 插件")]),t._v(" "),a("h2",{attrs:{id:"基本结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本结构"}},[t._v("#")]),t._v(" 基本结构")]),t._v(" "),a("p",[a("code",[t._v("plugins")]),t._v(" 是可以使用自身原型方法 "),a("code",[t._v("apply")]),t._v(" 来实例化的对象。 "),a("code",[t._v("apply")]),t._v(" 只会在初始化插件时执行一次。"),a("code",[t._v("apply")]),t._v(" 传入 "),a("code",[t._v("webpack compiler")]),t._v(" 的引用，来获取编译器回调。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("myPlugin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在构造函数中获取用户给该插件传入的配置")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("options")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Webpack 会调用 myPlugin 实例的 apply 方法给插件实例传入 compiler 对象")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("compiler")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在emit阶段插入钩子函数，用于特定时机处理额外的逻辑；")]),t._v("\n    compiler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hooks"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("emit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'myPlugin'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("compilation")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在功能流程完成后可以调用 webpack 提供的回调函数；")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果事件是异步的，会带两个参数，第二个参数为回调函数，在插件处理完任务时需要调用回调函数通知webpack，才会进入下一个处理流程。")]),t._v("\n    compiler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("plugin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'emit'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("compilation"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" callback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 支持处理逻辑")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 处理完毕后执行 callback 以通知 Webpack ")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果不执行 callback，运行流程将会一直卡在这不往下执行 ")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("callback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nmodule"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" HelloPlugin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"工作原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#工作原理"}},[t._v("#")]),t._v(" 工作原理")]),t._v(" "),a("ol",[a("li",[t._v("读取配置时执行初始化实例 "),a("code",[t._v("new myPlugin(options)")])]),t._v(" "),a("li",[t._v("初始化 "),a("code",[t._v("compiler")]),t._v(" 对象后调用 "),a("code",[t._v("[plugin].apply(compiler)")]),t._v(" 传入 "),a("code",[t._v("compiler")]),t._v(" 对象")]),t._v(" "),a("li",[t._v("插件实例获取到 "),a("code",[t._v("compiler")]),t._v(" 对象后，就可以通过 "),a("code",[t._v("compiler.plugin(事件名称，回调函数)")]),t._v(" 监听到 "),a("code",[t._v("webpack")]),t._v(" 广播出来的事件，并且可以通过 "),a("code",[t._v("compiler")]),t._v(" 对象操作 "),a("code",[t._v("webpack")])])]),t._v(" "),a("h1",{attrs:{id:"如何实现动态加载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何实现动态加载"}},[t._v("#")]),t._v(" 如何实现动态加载")]),t._v(" "),a("p",[a("code",[t._v("webpack")]),t._v(" 本身是静态模板打包工具，它不会关心运行时到底发生了什么。\n使用 "),a("code",[t._v("import()")]),t._v(" 方法可以实现按需加载资源，在代码中所有使用 "),a("code",[t._v("import([路径])")]),t._v(" 的模块都被抽离成一个单独的chunk。在客户端执行到这行代码的时候，会自动请求加载这个资源。路径被编译之后会处理成 "),a("code",[t._v("webpack")]),t._v(" 命令执行目录的相对路径")]),t._v(" "),a("h1",{attrs:{id:"打包优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#打包优化"}},[t._v("#")]),t._v(" 打包优化")]),t._v(" "),a("ul",[a("li",[t._v("代码拆分：将应用程序拆分为多个小块，按需加载，减小初始加载的文件大小，提高页面加载速度。")]),t._v(" "),a("li",[t._v("延迟加载：按需加载某些模块或代码块，减少初始加载的文件大小，提高页面响应速度。")]),t._v(" "),a("li",[t._v("压缩和混淆代码：使用压缩工具对代码进行压缩和混淆，减小文件大小，提高加载速度。")]),t._v(" "),a("li",[t._v("优化文件大小：使用加载器和插件对不同类型的文件进行优化处理，如压缩CSS、压缩图片等。")]),t._v(" "),a("li",[t._v("缓存和长效缓存：生成带有哈希值的文件名，利用浏览器缓存机制，减少请求次数，提高再次访问时的加载速度。")]),t._v(" "),a("li",[t._v("Tree Shaking：消除未使用的代码，减小文件大小，提高运行时的性能。\n并行构建和缓存：使用多线程构建和缓存策略，加快构建速度，提高开发效率。")]),t._v(" "),a("li",[t._v("优化webpack配置：合理配置选项和插件，如设置合适的模式、调整模块解析规则等。")])]),t._v(" "),a("h1",{attrs:{id:"webpack-require是如何查找依赖的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack-require是如何查找依赖的"}},[t._v("#")]),t._v(" webpack require是如何查找依赖的")]),t._v(" "),a("ol",[a("li",[t._v("解析路径：webpack会根据配置文件中的resolve属性来解析模块的路径，resolve属性包含了一系列的解析规则，例如指定了模块的根目录、模块的别名等。webpack会根据这些规则来解析模块的路径。")]),t._v(" "),a("li",[t._v("查找文件：一旦webpack解析了模块的路径，会尝试在指定的路径下查找相应的文件。")]),t._v(" "),a("li",[t._v("解析依赖：在查找文件的过程中，如果webpack发现文件中存在其他的依赖关系（例如通过import或者require引入其他模块），它会继续递归地解析这些依赖关系，直到找到所有的依赖为止。\n🚧")])])])}),[],!1,null,null,null);a.default=e.exports}}]);